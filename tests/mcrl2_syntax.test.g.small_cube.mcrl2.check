6762 states 4248 scans 4248 shifts 219985 reductions 0 compares 0 ambiguities
((( sort (( Color  = ( struct (( green )(( | ( yellow ))( | ( red ))( | ( black ))( | ( orange ))( | ( blue ))))) ; )( Cube  = ( List  ( ( List  (  Color  ) ) ) ) ; )))( map (((( initial_cube ( ,  scrambled_cube )) :  Cube ) ; )((( solved ) : ( Cube  ->  Bool )) ; )))(( var (((( c ) :  Cube )) ; )) eqn ((( solved  ( ( c ) ) ) = (((( c  .  0 ) .  0 ) == (( c  .  0 ) .  1 )) && (((( c  .  0 ) .  0 ) == (( c  .  0 ) .  2 )) && (((( c  .  0 ) .  0 ) == (( c  .  0 ) .  3 )) && (((( c  .  1 ) .  0 ) == (( c  .  1 ) .  1 )) && (((( c  .  1 ) .  0 ) == (( c  .  2 ) .  0 )) && (((( c  .  1 ) .  0 ) == (( c  .  2 ) .  1 )) && (((( c  .  1 ) .  2 ) == (( c  .  1 ) .  3 )) && (((( c  .  1 ) .  2 ) == (( c  .  2 ) .  2 )) && (((( c  .  1 ) .  2 ) == (( c  .  2 ) .  3 )) && (((( c  .  1 ) .  4 ) == (( c  .  1 ) .  5 )) && (((( c  .  1 ) .  4 ) == (( c  .  2 ) .  4 )) && (((( c  .  1 ) .  4 ) == (( c  .  2 ) .  5 )) && (((( c  .  1 ) .  6 ) == (( c  .  1 ) .  7 )) && (((( c  .  1 ) .  6 ) == (( c  .  2 ) .  6 )) && (((( c  .  1 ) .  6 ) == (( c  .  2 ) .  7 )) && (((( c  .  3 ) .  0 ) == (( c  .  3 ) .  1 )) && (((( c  .  3 ) .  0 ) == (( c  .  3 ) .  2 )) && ((( c  .  3 ) .  0 ) == (( c  .  3 ) .  3 ))))))))))))))))))) ; )( initial_cube  = ( [ (( [ ( green (( ,  green )( ,  green )( ,  green ))) ] )(( , ( [ ( orange (( ,  orange )( ,  yellow )( ,  yellow )( ,  red )( ,  red )( ,  black )( ,  black ))) ] ))( , ( [ ( orange (( ,  orange )( ,  yellow )( ,  yellow )( ,  red )( ,  red )( ,  black )( ,  black ))) ] ))( , ( [ ( blue (( ,  blue )( ,  blue )( ,  blue ))) ] )))) ] ) ; )( scrambled_cube  = ( [ (( [ ( yellow (( ,  black )( ,  red )( ,  orange ))) ] )(( , ( [ ( blue (( ,  orange )( ,  green )( ,  yellow )( ,  blue )( ,  yellow )( ,  green )( ,  orange ))) ] ))( , ( [ ( green (( ,  orange )( ,  blue )( ,  green )( ,  red )( ,  red )( ,  black )( ,  red ))) ] ))( , ( [ ( black (( ,  black )( ,  yellow )( ,  blue ))) ] )))) ] ) ; )))( map ((( perform_rotate_right_top_backwards (( ,  perform_rotate_right_top_forwards )( ,  perform_rotate_left_top_backwards )( ,  perform_rotate_left_top_forwards )( ,  perform_rotate_up_clockwise )( ,  perform_rotate_up_counter_clockwise )( ,  perform_rotate_down_clockwise )( ,  perform_rotate_down_counter_clockwise )( ,  perform_rotate_front_clockwise )( ,  perform_rotate_front_counter_clockwise )( ,  perform_rotate_back_clockwise )( ,  perform_rotate_back_counter_clockwise )( ,  perform_rotate_down ))) : ( Cube  ->  Cube )) ; ))(( var (((( c ) :  Cube )) ; )) eqn ((( perform_rotate_right_top_backwards  ( ( c ) ) ) = ( [ (( [ ((( c  .  0 ) .  0 )(( , (( c  .  2 ) .  1 ))( , (( c  .  1 ) .  1 ))( , (( c  .  0 ) .  3 )))) ] )(( , ( [ ((( c  .  1 ) .  0 )(( , (( c  .  3 ) .  1 ))( , (( c  .  2 ) .  2 ))( , (( c  .  1 ) .  2 ))( , (( c  .  0 ) .  1 ))( , (( c  .  1 ) .  5 ))( , (( c  .  1 ) .  6 ))( , (( c  .  1 ) .  7 )))) ] ))( , ( [ ((( c  .  2 ) .  0 )(( , (( c  .  3 ) .  2 ))( , (( c  .  2 ) .  3 ))( , (( c  .  1 ) .  3 ))( , (( c  .  0 ) .  2 ))( , (( c  .  2 ) .  5 ))( , (( c  .  2 ) .  6 ))( , (( c  .  2 ) .  7 )))) ] ))( , ( [ ((( c  .  3 ) .  0 )(( , (( c  .  2 ) .  4 ))( , (( c  .  1 ) .  4 ))( , (( c  .  3 ) .  3 )))) ] )))) ] ) ; )(( perform_rotate_right_top_forwards  ( ( c ) ) ) = ( perform_rotate_right_top_backwards  ( (( perform_rotate_right_top_backwards  ( (( perform_rotate_right_top_backwards  ( ( c ) ) )) ) )) ) ) ; )(( perform_rotate_left_top_backwards  ( ( c ) ) ) = ( [ (( [ ((( c  .  2 ) .  0 )(( , (( c  .  0 ) .  1 ))( , (( c  .  0 ) .  2 ))( , (( c  .  1 ) .  0 )))) ] )(( , ( [ ((( c  .  3 ) .  0 )(( , (( c  .  1 ) .  1 ))( , (( c  .  1 ) .  2 ))( , (( c  .  1 ) .  3 ))( , (( c  .  1 ) .  4 ))( , (( c  .  0 ) .  0 ))( , (( c  .  1 ) .  7 ))( , (( c  .  2 ) .  7 )))) ] ))( , ( [ ((( c  .  3 ) .  3 )(( , (( c  .  2 ) .  1 ))( , (( c  .  2 ) .  2 ))( , (( c  .  2 ) .  3 ))( , (( c  .  2 ) .  4 ))( , (( c  .  0 ) .  3 ))( , (( c  .  1 ) .  6 ))( , (( c  .  2 ) .  6 )))) ] ))( , ( [ ((( c  .  2 ) .  5 )(( , (( c  .  3 ) .  1 ))( , (( c  .  3 ) .  2 ))( , (( c  .  1 ) .  5 )))) ] )))) ] ) ; )(( perform_rotate_left_top_forwards  ( ( c ) ) ) = ( perform_rotate_left_top_backwards  ( (( perform_rotate_left_top_backwards  ( (( perform_rotate_left_top_backwards  ( ( c ) ) )) ) )) ) ) ; )(( perform_rotate_up_counter_clockwise  ( ( c ) ) ) = ( [ (( [ ((( c  .  0 ) .  3 )(( , (( c  .  0 ) .  0 ))( , (( c  .  0 ) .  1 ))( , (( c  .  0 ) .  2 )))) ] )(( , ( [ ((( c  .  1 ) .  6 )(( , (( c  .  1 ) .  7 ))( , (( c  .  1 ) .  0 ))( , (( c  .  1 ) .  1 ))( , (( c  .  1 ) .  2 ))( , (( c  .  1 ) .  3 ))( , (( c  .  1 ) .  4 ))( , (( c  .  1 ) .  5 )))) ] ))( , ( [ ((( c  .  2 ) .  0 )(( , (( c  .  2 ) .  1 ))( , (( c  .  2 ) .  2 ))( , (( c  .  2 ) .  3 ))( , (( c  .  2 ) .  4 ))( , (( c  .  2 ) .  5 ))( , (( c  .  2 ) .  6 ))( , (( c  .  2 ) .  7 )))) ] ))( , ( [ ((( c  .  3 ) .  0 )(( , (( c  .  3 ) .  1 ))( , (( c  .  3 ) .  2 ))( , (( c  .  3 ) .  3 )))) ] )))) ] ) ; )(( perform_rotate_up_clockwise  ( ( c ) ) ) = ( perform_rotate_up_counter_clockwise  ( (( perform_rotate_up_counter_clockwise  ( (( perform_rotate_up_counter_clockwise  ( ( c ) ) )) ) )) ) ) ; )(( perform_rotate_down_clockwise  ( ( c ) ) ) = ( [ (( [ ((( c  .  0 ) .  0 )(( , (( c  .  0 ) .  1 ))( , (( c  .  0 ) .  2 ))( , (( c  .  0 ) .  3 )))) ] )(( , ( [ ((( c  .  1 ) .  0 )(( , (( c  .  1 ) .  1 ))( , (( c  .  1 ) .  2 ))( , (( c  .  1 ) .  3 ))( , (( c  .  1 ) .  4 ))( , (( c  .  1 ) .  5 ))( , (( c  .  1 ) .  6 ))( , (( c  .  1 ) .  7 )))) ] ))( , ( [ ((( c  .  2 ) .  6 )(( , (( c  .  2 ) .  7 ))( , (( c  .  2 ) .  0 ))( , (( c  .  2 ) .  1 ))( , (( c  .  2 ) .  2 ))( , (( c  .  2 ) .  3 ))( , (( c  .  2 ) .  4 ))( , (( c  .  2 ) .  5 )))) ] ))( , ( [ ((( c  .  3 ) .  3 )(( , (( c  .  3 ) .  0 ))( , (( c  .  3 ) .  1 ))( , (( c  .  3 ) .  2 )))) ] )))) ] ) ; )(( perform_rotate_down_counter_clockwise  ( ( c ) ) ) = ( perform_rotate_down_clockwise  ( (( perform_rotate_down_clockwise  ( (( perform_rotate_down_clockwise  ( ( c ) ) )) ) )) ) ) ; )(( perform_rotate_front_clockwise  ( ( c ) ) ) = ( [ (( [ ((( c  .  2 ) .  7 )(( , (( c  .  1 ) .  7 ))( , (( c  .  0 ) .  2 ))( , (( c  .  0 ) .  3 )))) ] )(( , ( [ ((( c  .  2 ) .  0 )(( , (( c  .  1 ) .  0 ))( , (( c  .  0 ) .  0 ))( , (( c  .  1 ) .  3 ))( , (( c  .  1 ) .  4 ))( , (( c  .  1 ) .  5 ))( , (( c  .  1 ) .  6 ))( , (( c  .  3 ) .  0 )))) ] ))( , ( [ ((( c  .  2 ) .  1 )(( , (( c  .  1 ) .  1 ))( , (( c  .  0 ) .  1 ))( , (( c  .  2 ) .  3 ))( , (( c  .  2 ) .  4 ))( , (( c  .  2 ) .  5 ))( , (( c  .  2 ) .  6 ))( , (( c  .  3 ) .  1 )))) ] ))( , ( [ ((( c  .  2 ) .  2 )(( , (( c  .  1 ) .  2 ))( , (( c  .  3 ) .  2 ))( , (( c  .  3 ) .  3 )))) ] )))) ] ) ; )(( perform_rotate_front_counter_clockwise  ( ( c ) ) ) = ( perform_rotate_front_clockwise  ( (( perform_rotate_front_clockwise  ( (( perform_rotate_front_clockwise  ( ( c ) ) )) ) )) ) ) ; )(( perform_rotate_back_clockwise  ( ( c ) ) ) = ( [ (( [ ((( c  .  0 ) .  0 )(( , (( c  .  0 ) .  1 ))( , (( c  .  2 ) .  3 ))( , (( c  .  1 ) .  3 )))) ] )(( , ( [ ((( c  .  1 ) .  0 )(( , (( c  .  1 ) .  1 ))( , (( c  .  1 ) .  2 ))( , (( c  .  3 ) .  2 ))( , (( c  .  2 ) .  4 ))( , (( c  .  1 ) .  4 ))( , (( c  .  0 ) .  2 ))( , (( c  .  1 ) .  7 )))) ] ))( , ( [ ((( c  .  2 ) .  0 )(( , (( c  .  2 ) .  1 ))( , (( c  .  2 ) .  2 ))( , (( c  .  3 ) .  3 ))( , (( c  .  2 ) .  5 ))( , (( c  .  1 ) .  5 ))( , (( c  .  0 ) .  3 ))( , (( c  .  2 ) .  7 )))) ] ))( , ( [ ((( c  .  3 ) .  0 )(( , (( c  .  3 ) .  1 ))( , (( c  .  2 ) .  6 ))( , (( c  .  1 ) .  6 )))) ] )))) ] ) ; )(( perform_rotate_back_counter_clockwise  ( ( c ) ) ) = ( perform_rotate_back_clockwise  ( (( perform_rotate_back_clockwise  ( (( perform_rotate_back_clockwise  ( ( c ) ) )) ) )) ) ) ; )))( map (((( selftest ) : ( Cube  ->  Bool )) ; )((( count_ ) : (( Cube  #  Color ) ->  Nat )) ; )((( count_ ) : ((( List  (  Color  ) ) #  Color ) ->  Nat )) ; )))(( var ((((( c ) :  Cube )) ; )(((( col ( ,  col1 )) :  Color )) ; )(((( l ) : ( List  (  Color  ) ))) ; ))) eqn ((( selftest  ( ( c ) ) ) = ((( count_  ( ( c ( ,  green )) ) ) ==  4 ) && ((( count_  ( ( c ( ,  yellow )) ) ) ==  4 ) && ((( count_  ( ( c ( ,  red )) ) ) ==  4 ) && ((( count_  ( ( c ( ,  black )) ) ) ==  4 ) && (( count_  ( ( c ( ,  blue )) ) ) ==  4 ))))) ; )(( count_  ( ( c ( ,  col )) ) ) = (((( count_  ( (( c  .  0 )( ,  col )) ) ) + ( count_  ( (( c  .  1 )( ,  col )) ) )) + ( count_  ( (( c  .  2 )( ,  col )) ) )) + ( count_  ( (( c  .  3 )( ,  col )) ) )) ; )((( l  == ( [  ] )) -> )( count_  ( ( l ( ,  col )) ) ) =  0  ; )(( count_  ( (( col  |>  l )( ,  col1 )) ) ) = ( if  ( (( col1  ==  col )(( , ( succ  ( (( count_  ( ( l ( ,  col1 )) ) )) ) ))( , ( count_  ( ( l ( ,  col1 )) ) )))) ) ) ; )))( sort ( Color  = ( struct (( green )(( | ( yellow ))( | ( red ))( | ( black ))( | ( orange ))( | ( blue ))))) ; ))( act (( rotate_right_cl (( ,  rotate_right_ccl )( ,  rotate_left_cl )( ,  rotate_left_ccl )( ,  rotate_up_cl )( ,  rotate_up_ccl )( ,  rotate_down_cl )( ,  rotate_down_ccl )( ,  rotate_front_cl )( ,  rotate_front_ccl )( ,  rotate_back_cl )( ,  rotate_back_ccl )( ,  error )( ,  solved ))) ; ))( proc ( P ( ( ((( c ) :  Cube )) ) ) = ((((((((((((((( rotate_right_cl ) . ( P ( ( (( perform_rotate_right_top_backwards  ( ( c ) ) )) ) ))) + (( rotate_right_ccl ) . ( P ( ( (( perform_rotate_right_top_forwards  ( ( c ) ) )) ) )))) + (( rotate_left_cl ) . ( P ( ( (( perform_rotate_left_top_forwards  ( ( c ) ) )) ) )))) + (( rotate_left_ccl ) . ( P ( ( (( perform_rotate_left_top_backwards  ( ( c ) ) )) ) )))) + (( rotate_up_cl ) . ( P ( ( (( perform_rotate_up_clockwise  ( ( c ) ) )) ) )))) + (( rotate_up_ccl ) . ( P ( ( (( perform_rotate_up_counter_clockwise  ( ( c ) ) )) ) )))) + (( rotate_down_cl ) . ( P ( ( (( perform_rotate_down_clockwise  ( ( c ) ) )) ) )))) + (( rotate_down_ccl ) . ( P ( ( (( perform_rotate_down_counter_clockwise  ( ( c ) ) )) ) )))) + (( rotate_front_cl ) . ( P ( ( (( perform_rotate_front_clockwise  ( ( c ) ) )) ) )))) + (( rotate_front_ccl ) . ( P ( ( (( perform_rotate_front_counter_clockwise  ( ( c ) ) )) ) )))) + (( rotate_back_cl ) . ( P ( ( (( perform_rotate_back_clockwise  ( ( c ) ) )) ) )))) + (( rotate_back_ccl ) . ( P ( ( (( perform_rotate_back_counter_clockwise  ( ( c ) ) )) ) )))) + (( solved  ( ( c ) ) ) -> (( solved ) . ( P ( ( ( c ) ) ))))) +  delta ) ; )))( init ( P ( ( ( scrambled_cube ) ) )) ; ))
