1224 states 750 scans 750 shifts 965 reductions 0 compares 0 ambiguities
((( sort (( Position  = ( struct (( this_side )( | ( far_side )))) ; )( Person  = ( struct (( p1 )(( | ( p2 ))( | ( p3 ))( | ( p4 ))))) ; )))( map (((( travel_time ) : ( Person  ->  Nat )) ; )((( initial_locations ) : ( Person  ->  Position )) ; )((( other_side ) : ( Position  ->  Position )) ; )))(( var (((( p ) :  Person )) ; )) eqn ((( travel_time  ( ( p1 ) ) ) =  1  ; )(( travel_time  ( ( p2 ) ) ) =  2  ; )(( travel_time  ( ( p3 ) ) ) =  5  ; )(( travel_time  ( ( p4 ) ) ) =  10  ; )(( initial_locations  ( ( p ) ) ) =  this_side  ; )(( other_side  ( ( this_side ) ) ) =  far_side  ; )(( other_side  ( ( far_side ) ) ) =  this_side  ; )))( map ((( MAXIMAL_CROSSING_TIME ) :  Nat ) ; ))( eqn ( MAXIMAL_CROSSING_TIME  =  20  ; ))( act ((( ready )( :  Nat ) ; )(( move )( : ( Person  #  Position )) ; )(( move )( : (( Person  #  Person ) #  Position )) ; )))( proc ( X ( ( ((( light_position ) :  Position )(( , (( location ) : ( Person  ->  Position )))( , (( current_time ) :  Nat )))) ) ) = (((( ( (( current_time  <=  MAXIMAL_CROSSING_TIME ) && ( forall ((( p ) :  Person )) . (( location  ( ( p ) ) ) ==  far_side ))) ) ) -> (( ready ( ( ( current_time ) ) )) .  delta )) + ( sum ((( p ) :  Person )) . (( ( (( current_time  <=  MAXIMAL_CROSSING_TIME ) && (( location  ( ( p ) ) ) ==  light_position )) ) ) -> (( move ( ( ( p ( , ( other_side  ( (( location  ( ( p ) ) )) ) ))) ) )) . ( X ( ( (( other_side  ( ( light_position ) ) )(( , ( location  [  p  -> ( other_side  ( (( location  ( ( p ) ) )) ) ) ] ))( , ( current_time  + ( travel_time  ( ( p ) ) ))))) ) )))))) + ( sum ((( p ( ,  p' )) :  Person )) . (( ( (( p  !=  p' ) && (( current_time  <=  MAXIMAL_CROSSING_TIME ) && ((( location  ( ( p ) ) ) ==  light_position ) && (( location  ( ( p' ) ) ) ==  light_position )))) ) ) -> (( move ( ( ( p (( ,  p' )( , ( other_side  ( (( location  ( ( p ) ) )) ) )))) ) )) . ( X ( ( (( other_side  ( ( light_position ) ) )(( , (( location  [  p  -> ( other_side  ( (( location  ( ( p ) ) )) ) ) ] ) [  p'  -> ( other_side  ( (( location  ( ( p' ) ) )) ) ) ] ))( , ( current_time  + ( max  ( (( travel_time  ( ( p ) ) )( , ( travel_time  ( ( p' ) ) ))) ) ))))) ) )))))) ; )))( init ( X ( ( ( this_side (( ,  initial_locations )( ,  0 ))) ) )) ; ))
