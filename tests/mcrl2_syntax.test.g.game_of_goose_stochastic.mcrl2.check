3088 states 1940 scans 1940 shifts 2526 reductions 32 compares 0 ambiguities
((( map (((( number_of_players ) :  Pos ) ; )((( previous ( ,  next )) : ( Pos  ->  Pos )) ; )((( initial_positions ) : ( Pos  ->  Nat )) ; )((( adapt_after_63 ) : ( Int  ->  Nat )) ; )((( next_position ) : (((( Pos  # ( ( ( Pos  ->  Nat ) ) )) #  Pos ) #  Pos ) ->  Nat )) ; )((( next_position2 ) : (((( Pos  # ( ( ( Pos  ->  Nat ) ) )) #  Int ) #  Nat ) ->  Nat )) ; )((( occupied ( ,  occupied_pw )) : (( Pos  # ( ( ( Pos  ->  Nat ) ) )) ->  Bool )) ; )((( occupied_rec ) : ((( Pos  # ( ( ( Pos  ->  Nat ) ) )) #  Pos ) ->  Bool )) ; )))(( var ((((( player (( ,  other )( ,  throw1 )( ,  throw2 ))) :  Pos )) ; )(((( throw ( ,  n )) :  Int )) ; )(((( position ) : ( Pos  ->  Nat ))) ; )(((( old_position ) :  Nat )) ; ))) eqn (( number_of_players  =  2  ; )(( next  ( ( player ) ) ) = ( if  ( (( player  ==  number_of_players )(( ,  1 )( , ( player  +  1 )))) ) ) ; )(( previous  ( ( player ) ) ) = ( if  ( (( player  >  1 )(( , ( max  ( ( 1 ( , ( player  -  1 ))) ) ))( ,  number_of_players ))) ) ) ; )(( initial_positions  ( ( player ) ) ) =  0  ; )(( adapt_after_63  ( ( n ) ) ) = ( Int2Nat  ( (( if  ( (( n  >  63 )(( , (( 63  +  63 ) -  n ))( ,  n ))) ) )) ) ) ; )(( next_position  ( ( player (( ,  position )( ,  throw1 )( ,  throw2 ))) ) ) = ( if  ( (((( position  ( ( player ) ) ) ==  0 ) && ( ( ((( throw1  ==  4 ) && ( throw2  ==  5 )) || (( throw1  ==  5 ) && ( throw2  ==  4 ))) ) ))(( , ( if  ( (( occupied  ( ( player ( , ( position  [  player  ->  53  ] ))) ) )(( ,  0 )( ,  53 ))) ) ))( , ( if  ( (((( position  ( ( player ) ) ) ==  0 ) && ( ( ((( throw1  ==  3 ) && ( throw2  ==  6 )) || (( throw1  ==  6 ) && ( throw2  ==  3 ))) ) ))(( , ( if  ( (( occupied  ( ( player ( , ( position  [  player  ->  26  ] ))) ) )(( ,  0 )( ,  26 ))) ) ))( , ( next_position2  ( ( player (( , ( position  [  player  -> ( adapt_after_63  ( (((( position  ( ( player ) ) ) +  throw1 ) +  throw2 )) ) ) ] ))( , ( if  ( ((((( position  ( ( player ) ) ) +  throw1 ) +  throw2 ) >  63 )(( , (( -  throw1 ) -  throw2 ))( , ( throw1  +  throw2 )))) ) ))( , ( position  ( ( player ) ) )))) ) )))) ) )))) ) ) ; )((( ( (( position  ( ( player ) ) ) <  65 ) ) ) -> )( next_position2  ( ( player (( ,  position )( ,  throw )( ,  old_position ))) ) ) = ( if  ( ((( position  ( ( player ) ) ) in ( { ( 5 (( ,  9 )( ,  14 )( ,  18 )( ,  23 )( ,  27 )( ,  32 )( ,  36 )( ,  41 )( ,  45 )( ,  50 )( ,  54 )( ,  59 ))) } ))(( , ( next_position2  ( ( player (( , ( position  [  player  -> ( adapt_after_63  ( ((( position  ( ( player ) ) ) +  throw )) ) ) ] ))( , ( if  ( (((( position  ( ( player ) ) ) +  throw ) >  63 )(( , ( -  throw ))( ,  throw ))) ) ))( ,  old_position ))) ) ))( , ( if  ( ((( position  ( ( player ) ) ) ==  6 )(( , ( next_position2  ( ( player (( , ( position  [  player  ->  12  ] ))( ,  throw )( ,  old_position ))) ) ))( , ( if  ( ((( position  ( ( player ) ) ) ==  19 )(( , ( next_position2  ( ( player (( , ( position  [  player  ->  64  ] ))( ,  throw )( ,  old_position ))) ) ))( , ( if  ( ((( position  ( ( player ) ) ) ==  42 )(( , ( next_position2  ( ( player (( , ( position  [  player  ->  30  ] ))( ,  throw )( ,  old_position ))) ) ))( , ( if  ( ((( position  ( ( player ) ) ) ==  58 )(( , ( next_position2  ( ( player (( , ( position  [  player  ->  0  ] ))( ,  throw )( ,  old_position ))) ) ))( , ( if  ( (( occupied_pw  ( ( player ( ,  position )) ) )(( ,  old_position )( , ( position  ( ( player ) ) )))) ) )))) ) )))) ) )))) ) )))) ) )))) ) ) ; )(( occupied_pw  ( ( player ( ,  position )) ) ) = (( ! ( ( (( position  ( ( player ) ) ) in ( { ( 31 ( ,  52 )) } )) ) )) && ( occupied  ( ( player ( ,  position )) ) )) ; )(( occupied  ( ( player ( ,  position )) ) ) = ( occupied_rec  ( ( player (( ,  position )( ,  1 ))) ) ) ; )(( occupied_rec  ( ( player (( ,  position )( ,  other ))) ) ) = (( if  ( (( other  <  number_of_players )(( , ( occupied_rec  ( ( player (( ,  position )( , ( other  +  1 )))) ) ))( ,  false ))) ) ) || ( ( (( other  !=  player ) && ( ( ((( position  ( ( player ) ) ) == ( position  ( ( other ) ) )) || (((( position  ( ( other ) ) ) ==  19 ) && (( position  ( ( player ) ) ) ==  64 )) || ((( position  ( ( other ) ) ) ==  64 ) && (( position  ( ( player ) ) ) ==  19 )))) ) )) ) )) ; )))( act ((( throw )( : (( Pos  #  Pos ) #  Pos )) ; )(( skip ( ,  win ))( :  Pos ) ; )(( player_at )( : ( Pos  #  Nat )) ; )))( proc ( THROW ( ( ((( player ) :  Pos )( , (( position ) : ( Pos  ->  Nat )))) ) ) = ( sum ((( player ) :  Pos )) . ((( ( ( player  <=  number_of_players ) ) ) -> (( player_at ( ( ( player ( , ( position  ( ( player ) ) ))) ) )) .  delta )) + (( ( (( position  ( (( previous  ( ( player ) ) )) ) ) ==  63 ) ) ) -> (( win ( ( (( previous  ( ( player ) ) )) ) )) .  delta ) <> (( ( ((( position  ( ( player ) ) ) in ( { ( 31 ( ,  52 )) } )) && ( ! ( occupied  ( ( player ( ,  position )) ) ))) ) ) -> (( skip ( ( ( player ) ) )) . ( THROW ( ( (( next  ( ( player ) ) )( ,  position )) ) ))) <> (( ( (( position  ( ( player ) ) ) ==  64 ) ) ) -> (( skip ( ( ( player ) ) )) . ( THROW ( ( (( next  ( ( player ) ) )( , ( position  [  player  ->  19  ] ))) ) ))) <> ( dist ((( throw1 ( ,  throw2 )) :  Pos )) [ ( if  ( ((( throw1  <=  6 ) && ( throw2  <=  6 ))(( , ( 1  /  36 ))( ,  0 ))) ) ) ]  . (( throw ( ( ( player (( ,  throw1 )( ,  throw2 ))) ) )) . ( THROW ( ( (( next  ( ( player ) ) )( , ( position  [  player  -> ( next_position  ( ( player (( ,  position )( ,  throw1 )( ,  throw2 ))) ) ) ] ))) ) ))))))))) ; )))( init ( THROW ( ( ( 1 ( ,  initial_positions )) ) )) ; ))
