1450 states 903 scans 903 shifts 941 reductions 0 compares 0 ambiguities
((( sort (( Item  = ( struct (( wolf )(( | ( goat ))( | ( cabbage ))))) ; )( Position  = ( struct (( left )( | ( right )))) ; )( Shores  = ( struct (( shores ( ( ((( Set  (  Item  ) ))( , (( Set  (  Item  ) )))) ) )))) ; )))( map (((( opp ) : ( Position  ->  Position )) ; )((( items ) : (( Shores  #  Position ) -> ( Set  (  Item  ) ))) ; )((( update ) : ((( Shores  #  Position ) #  Item ) ->  Shores )) ; )))(( var ((((( s ( ,  t )) : ( Set  (  Item  ) ))) ; )(((( i ) :  Item )) ; ))) eqn ((( opp  ( ( left ) ) ) =  right  ; )(( opp  ( ( right ) ) ) =  left  ; )(( items  ( (( shores  ( ( s ( ,  t )) ) )( ,  left )) ) ) =  s  ; )(( items  ( (( shores  ( ( s ( ,  t )) ) )( ,  right )) ) ) =  t  ; )(( update  ( (( shores  ( ( s ( ,  t )) ) )(( ,  right )( ,  i ))) ) ) = ( shores  ( (( s  - ( { ( i ) } ))( , ( t  + ( { ( i ) } )))) ) ) ; )(( update  ( (( shores  ( ( s ( ,  t )) ) )(( ,  left )( ,  i ))) ) ) = ( shores  ( (( s  + ( { ( i ) } ))( , ( t  - ( { ( i ) } )))) ) ) ; )))( act ((( is_eaten )( :  Item ) ; )(( move )( :  Position ) ; )(( move )( : ( Position  #  Item )) ; )(( done ) ; )))( proc ( WGC ( ( ((( s ) :  Shores )( , (( p ) :  Position ))) ) ) = (((( ( (( { ( wolf ( ,  goat )) } ) <= ( items  ( ( s ( , ( opp  ( ( p ) ) ))) ) )) ) ) -> (( is_eaten ( ( ( goat ) ) )) .  delta )) + (( ( (( { ( goat ( ,  cabbage )) } ) <= ( items  ( ( s ( , ( opp  ( ( p ) ) ))) ) )) ) ) -> (( is_eaten ( ( ( cabbage ) ) )) .  delta ))) + (( ( (( ! ( ( (( { ( wolf ( ,  goat )) } ) <= ( items  ( ( s ( , ( opp  ( ( p ) ) ))) ) )) ) )) && ( ! ( ( (( { ( goat ( ,  cabbage )) } ) <= ( items  ( ( s ( , ( opp  ( ( p ) ) ))) ) )) ) ))) ) ) -> ( ( (((( move ( ( (( opp  ( ( p ) ) )) ) )) . ( WGC ( ( ( s ( , ( opp  ( ( p ) ) ))) ) ))) + ( sum ((( i ) :  Item )) . (( ( ( i  in ( items  ( ( s ( ,  p )) ) )) ) ) -> (( move ( ( (( opp  ( ( p ) ) )( ,  i )) ) )) . ( WGC ( ( (( update  ( ( s (( , ( opp  ( ( p ) ) ))( ,  i ))) ) )( , ( opp  ( ( p ) ) ))) ) )))))) + (( ( (( items  ( ( s ( ,  right )) ) ) == ( { ( wolf (( ,  goat )( ,  cabbage ))) } )) ) ) -> (( done ) .  delta ))) ) ))) ; )))( init ( WGC ( ( (( shores  ( (( { ( wolf (( ,  goat )( ,  cabbage ))) } )( , ( {  } ))) ) )( ,  left )) ) )) ; ))
